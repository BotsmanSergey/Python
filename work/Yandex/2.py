# Мама
# авТо
# гриБ
# Яблоко яБлоко ябЛоко яблОко яблоКо яблокО

# Пример строк которые не должны быть выделены выражением:

# агент007
# стриж
# ГТО
# Три богатыря

import re
string = 'стриж'
pattern = r'[а-я]*[А-Я]{1}[а-я]*'
match_object = re.findall(pattern, string)
print(match_object*)



'''
если кратко:
нам нужно проверить что значения левых поддеревьев меньше значения корней, а значения правых больше
запускаем рекурсию которая возвращает нам False в случаи если условие не выполняеться и список крайних значений если условие выполняется
В конце оборачиваем функцию в функцию которая возвращает False в случаи получения False и True в случаи получения списка


если развернуто:
создадим функцию в которую передаем вершину дерева
описание функции:
создаем пустой список left_node (в которые будут поступать крайние значения поддеревьев)
создаем пустой список right_node
если у ноды имеется левая дочерняя нода, то вызываем нашу функция (получаем рекурсию)
    ecли значение False возвращаем False
    если получаем список left_node со значениями [left_value, right_value] или только [one_value]
    если длинна left_node равно 2 и right_value <= left_value, то возвращаем False (так как значение левой ноды должно быть строго меньше правой)
если список left_node пуст, то вставляем значение текущей ноды
    иначе если последнее значение в списке left_node больше значения текущей ноды (current_value) возвращаем False(так как значения всех листьев левой ноды должно быть строго меньше значений текущей ноды)
        иначе второе значение списка left_node присваивается значение текущей ноды (current_value),
если у ноды имеется правая дочерняя нода, то вызываем нашу функция (получаем рекурсию)
    ecли значение False возвращаем False
    получаем список right_node со значениями [left_value, right_value] или только [one_value]
    если длинна right_node равно 2 и right_value <= left_value, то возвращаем False (так как значение левой ноды должно быть строго меньше правой) 
    если первое значение списка right_node меньше сurrent_value возвращаем False
        иначе меняем в списке left_node значение right_value на последнее значение из right_node
если список right_node пуст, то возвращаем список left_node
В конце оборачиваем функцию в функцию которая возвращает False в случаи получения False и True в случаи получения списка



    
'''